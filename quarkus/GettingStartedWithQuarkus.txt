

# We can create Quarkus applications in three distinctive ways plus an additional way in an IDE & through REST:

    1) Quarkus Maven plugin
    2) Quarkus CLI (Command Line Interface)
    3) The website’s graphical starter interface

Note:  to generate a project utilizing Gradle build tool, you can add --gradle flag.

1) Quarkus Maven plugin
If you maven installed use following:
mvn io.quarkus.platform:quarkus-maven-plugin:3.5.0:create \
    -DplatformVersion=3.5.0 \
    -DprojectGroupId=org.acme \
    -DprojectArtifactId=quarkus-maven-generated \
    -Dextensions="resteasy-reactive"

2) Quarkus CLI (Command Line Interface) - Using SDKMan
First install SDKMan if not insatlled already:
curl -s https://get.sdkman.io | bash
source "$HOME/.sdkman/bin/sdkman-init.sh"
sdk version
echo $PATH

https://quarkus.io/guides/cli-tooling
sdk install quarkus
quarkus --version
quarkus --help

quarkus create app -h
quarkus create app -help
quarkus create app org.acme:quarkus-cli-generated -P 3.5.0 --extension resteasy-reactive

3) The website’s graphical starter interface
https://code.quarkus.io
select Java version (17, 21)

4) generator also provides a REST API exposed at https://code.quarkus.io/api
curl "https://code.quarkus.io/api/download?g=org.acme&a=quarkus-rest-generated&e=quarkus-resteasy-reactive" --output quarkus-in-action.zip

Quarkus Resteasy reactive is now Quarkus Rest:
https://quarkus.io/guides/rest-migration

For CLI (Optional):
https://quarkus.io/get-started/
https://quarkus.io/guides/maven-tooling
https://quarkus.io/guides/gradle-tooling
https://quarkus.io/guides/cli-tooling
https://quarkus.io/guides/datasource
https://quarkus.io/guides/openapi-swaggeruiOpen in browser: http://localhost:8080/
https://quarkus.io/guides/hibernate-orm-panache

$ quarkus create app org.acme:quarkus-in-action -P 3.5.0  --extension resteasy-reactive
 
Quarkus dev mode:
# Maven
./mvnw quarkus:dev
# CLI
quarkus dev

Quarkus PROD:
# Maven
./mvnw clean package
# CLI
quarkus build
# Gradle
./gradlew build

# Below is not a fat JAR (also known as über JAR) and references externalized libraries/dependencies:
# It's useful for Docker layers (src/main/docker/Dockerfile.jvm)
java -jar target/quarkus-app/quarkus-run.jar

# Native compilation with GraalVM:
allows compiling of Java code ahead-of-time to a binary – a native executable. A native executable includes only the code required at run time, that is the application classes, standard-library classes, the language runtime, and statically-linked native code from the JDK. The ahead-of-time compilation refers to the process of compiling Java bytecode into system-specific machine instructions.

Quarkus executes the native build inside the Docker container in two cases — either on user request (in that case, it needs to be explicitly specified by a configuration property -Dquarkus.native.container-build=true) or as a fallback in case it is not able to find a valid GraalVM environment (e.g., GRAALVM_HOME is not set).

# Utilizing Maven profile
$ ./mvnw package -Pnative
# Gradle needs to use the system property directly
$ ./gradlew build -Dquarkus.package.type=native
# Or quarkus CLI for general approach
$ quarkus build --native

# Build Container Image:
./mvnw package -Pnative 
docker build -f src/main/docker/Dockerfile.native-micro -t quarkus/quarkus-gui-generated .
docker run -i --rm -p 8080:8080 <docker-image>

# Extensions
./mvnw quarkus:help
./mvnw quarkus:list-extensions

# Live Reload

# Profile
By default, there are three configuration profiles:
    prod — active when the application is running in production mode
    dev — active when application runs in Dev mode
    test — active during tests
custom user profiles with quarkus.profile
Profile specific proerty:
%dev.quarkus.http.port=7777

Quarkus provides two separate ways of overriding configuration dynamically - JVM system properties and environment variables.
priority: system properties, environment variables, and only then application.properties
$ GREETING="Environment variable value" ./mvnw quarkus:dev -Dgreeting="System property value"
$ GREETING="Environment variable value" quarkus dev -Dgreeting="System property value"

#DEV UI:

#DEV Serices: Database, Broker
Dev Services design allows them to only work in Dev mode and during tests.
Dev Services generally require Docker (or Podman) to be available because they use containers to run the underlying services. There are some exceptions, for example, the H2 and Derby databases - these are run directly inside the JVM of your application.

# Continuous Testing

Database(Panache):
Active record pattern


---------------------Above is 2024--------------------------------

I) My First Quarkus microservice (Developer Joy):
	1) https://code.quarkus.io
	2) Change aritfact text to "userms" and change to Java-11
	3) Add following dependencies(extensions):
		i) RESTEasy Reactive Jackson
		ii) JDBC Driver - H2
		iii) SmallRye OpenAPI
	4) Generate(zip) and Extract
	5) Run following command for starting quarkus application in dev mode
	./mvnw compile quarkus:dev
	6) Open in browser the default app page of quarkus application: http://localhost:8080/
	7) Open in browser REST API: http://localhost:8080/hello
	8) Open in browser Swagger-UI: http://localhost:8080/q/swagger-ui/
	9) Open in browser Dev-UI: http://localhost:8080/q/dev-ui/
	10) Import userms in your IDE
	

!!! Good Job !!!

II) Database intercation with Panache
	1) ./mvnw quarkus:list-extensions
	./mvnw quarkus:list-extensions | grep panache
	Execute any one of the below to add panache dependency: quarkus-hibernate-orm-panache
		a) ./mvnw quarkus:add-extension -Dextensions="io.quarkus:quarkus-hibernate-orm-panache"
		b) quarkus ext add hibernate-orm-panache	
		c) Manually add into pom.xml
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-hibernate-orm-panache</artifactId>
		</dependency>
		
III) client microservice:
	1) https://code.quarkus.io
	2) Change aritfacto text to "client-userms" and change to Java-11
	3) Add following dependencies(extensions):
		i) RESTEasy Reactive Jackson
		ii) RESTEasy Reactive's REST Client Jackson
		iii) SmallRye OpenAPI
		iV) SmallRye Fault Tolerance
	4) Generate(zip) and Extract
	5) Run following command for starting quarkus application in dev mode
	./mvnw compile quarkus:dev -Dquarkus.http.port=8082
	6) Open in browser the default app page of quarkus application: http://localhost:8082/
	7) Open in browser REST API: http://localhost:8082/hello
	8) Open in browser Swagger-UI: http://localhost:8082/q/swagger-ui/
	9) Open in browser Dev-UI: http://localhost:8082/q/dev-ui/
	10) Import userms in your IDE
	
Curl Script to simulate Bulkhead:
count=0
while (( count++ <= 100 )); do
curl -i \
-H "Content-Type: application/json" \
-X GET \
-d "2.03" \
http://localhost:8082/client/users-bh
echo
done

IV) Jaeger
	1) Add to your microservice:
		./mvnw quarkus:add-extension -Dextensions="opentelemetry"
	2) add docker-compose file
	3) 
	docker-compose -f docker-compose-opentelemetry.yml up -d
	4) Launch client-userms
	5) Launch userms
	6) Through Swagger-UI make few calls
	7) Open Jaeger-UI: http://localhost:16686/ (check Jaeger-UI port in docker-compose-opentelemetry.yml)

V) Prometheus + Grafana:
	1) 
	./mvnw quarkus:add-extension -Dextensions="micrometer-registry-prometheus"
	./mvnw quarkus:add-extension -Dextensions='container-image-jib'
	build userms image:
	./mvnw clean package -Dquarkus.container-image.build=true -Dmaven.test.skip -Dquarkus.profile=dev

VI) Keycloak Integration:
	1) https://code.quarkus.io
	2) Change aritfacto text to "paymentms-oidc" and change to Java-11
	3) Add following dependencies(extensions):
		i) RESTEasy Reactive Jackson
		ii) OpenID Connect
		iii) SmallRye OpenAPI
	4) Generate(zip) and Extract
	5) Run following command for starting quarkus application in dev mode
	./mvnw compile quarkus:dev -Dquarkus.http.port=8083
	6) Open in browser the default app page of quarkus application: http://localhost:8083/
	7) Open in browser REST API: http://localhost:8083/hello
	8) Open in browser Swagger-UI: http://localhost:8083/q/swagger-ui/
	9) Open in browser Dev-UI: http://localhost:8083/q/dev-ui/
	10) Import userms in your IDE
	
application.properties:
%test.quarkus.oidc.enabled=false
quarkus.devservices.timeout=2m
quarkus.oidc.application-type=service
quarkus.keycloak.devservices.shared=true


	A Dev Services Keycloak with default configuration contains a user named alice/bob with the password alice/bob and a third user as "admin:admin"
	
	
	john_admin:
	curl -H "Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ4UlVIeEdWWERNalRPM0R4NHQzRGdoOU1fc1dzWmxwY193LVJvVFNzQUg4In0.eyJleHAiOjE3MDMzOTQ2MTcsImlhdCI6MTcwMzM5NDAxOSwiYXV0aF90aW1lIjoxNzAzMzk0MDE3LCJqdGkiOiJhMTFlY2M3Yi04YmEwLTRiMjUtYjkyMy00ZDQ4MWM4Y2UwZjUiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjMyNzY5L3JlYWxtcy9xdWFya3VzIiwic3ViIjoiMmExYjc4ZDgtZTU4Ni00MzY0LTk4MTktMzJmN2Y2MTMxMWNlIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoicXVhcmt1cy1hcHAiLCJub25jZSI6InEwWDcwTVciLCJzZXNzaW9uX3N0YXRlIjoiOWE3Y2JhODUtOWRiOS00ZTUyLWI3ODEtNWJkOTc5NWI0MzYyIiwic2NvcGUiOiJvcGVuaWQgbWljcm9wcm9maWxlLWp3dCIsInNpZCI6IjlhN2NiYTg1LTlkYjktNGU1Mi1iNzgxLTViZDk3OTViNDM2MiIsInVwbiI6ImpvaG5fYWRtaW4iLCJncm91cHMiOlsibXlmaXJzdF9hZG1pbl9yZWFsbXJvbGUiLCJvZmZsaW5lX2FjY2VzcyIsImRlZmF1bHQtcm9sZXMtcXVhcmt1cyIsInVtYV9hdXRob3JpemF0aW9uIl19.Aog3YhC_bDG2z82i4G8AXKe9_ozI-a-VqlA2kt7f9fSZboQ1Y1eOt5lzczZVGsnO54t5qckU8ZLwz7x1mqHzXxAhxNXInp7qNyL0ssIk8UbQG6VDg0BTIiDBvpURD8JANe6UVU_PE1-3fcrWMRXpg4S2QMVLvg5DBv8b_w6D_kx_ocpKQ8zaLWHP4gSVF9J0gXkoHzXiqLHb2luQMvJ4A5K6c4bcj_GO0UplAbN4gJsotHpDKswPo1g4NEmlsuGdcTVKEhZ4u469gAizl-r3wx3KIwP4B92mzT3kDfZQ4h_DQlv5hXYjOOH7ACkTg2FNmk-1Kat85y4Jf2btaklIFw" localhost:8083/whoami -v
	
	john_user:
	curl -H "Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ4UlVIeEdWWERNalRPM0R4NHQzRGdoOU1fc1dzWmxwY193LVJvVFNzQUg4In0.eyJleHAiOjE3MDMzOTQ2NjksImlhdCI6MTcwMzM5NDI3MSwiYXV0aF90aW1lIjoxNzAzMzk0MjY5LCJqdGkiOiI4MDIwMzRmMC0xZmI4LTRjNGEtYmFiZS00Y2RiOWJhNmMyYTMiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjMyNzY5L3JlYWxtcy9xdWFya3VzIiwic3ViIjoiMThjMGFiMDItYTM2Mi00OTBkLWIwMzItMzE3MDQzNmFlODkxIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoicXVhcmt1cy1hcHAiLCJub25jZSI6ImdKZnBaSFkiLCJzZXNzaW9uX3N0YXRlIjoiNzBlYjE0OTctNjhlNy00MjNhLWJmNTAtMTU1ZjkxZjU2MzhkIiwic2NvcGUiOiJvcGVuaWQgbWljcm9wcm9maWxlLWp3dCIsInNpZCI6IjcwZWIxNDk3LTY4ZTctNDIzYS1iZjUwLTE1NWY5MWY1NjM4ZCIsInVwbiI6ImpvaG5fdXNlciIsImdyb3VwcyI6WyJvZmZsaW5lX2FjY2VzcyIsImRlZmF1bHQtcm9sZXMtcXVhcmt1cyIsInVtYV9hdXRob3JpemF0aW9uIiwibXlmaXJzdF9ub3JtYWxfcmVhbG1yb2xlIl19.DFJozA-vrepBBpQO356fpBQTQ3OW4xWmgboOwbicO-ij74oFM0JKj8KZqxFz7T-dDicAhVtROfYCH7pzKklWcGuEbx5OSi1CsQO0_9I67pZO4kxlJC2aPWpj7RdQFYVQKF3AckVluDhF7eY2Vd3cLyf_ZdJv3WswOOi7HiuSlMC_ZhdyVP-NcrZrO2FmRgB6gcz55cKiW43SVDRnzE9jEtWTIXGdv7MiIcoJZCBV8gC5fYBoS26a4xZ5thnZm1dBwxiHMpVLhzcUZ-XmDy-hA2jqLJ5hhPICqyp6yrQhv5joZsA1HS77cmmc93UsQ-gdE5nDVIOBfxVE0ruXdV2YnQ" localhost:8083/whoami -v
	
	curl -x POST http://localhost:32769/realms/quarkus/broker/keycloak-oidc/endpoint 
	
VII) Deployment: client-userms

cd client-userms
JAR:
./mvnw clean package -Dmaven.test.skip
java -jar target/quarkus-app/quarkus-run.jar 

UBER-JAR:
./mvnw package -Dquarkus.package.type=uber-jar -Dmaven.test.skip

NATIVE:
./mvnw clean install -Pnative -Dmaven.test.skip
./target/client-userms-1.0.0-SNAPSHOT-runner
started in 0.062s

KUBERNETES Integration:
./mvnw quarkus:add-extension -Dextensions="kubernetes"
./mvnw quarkus:add-extension -Dextensions="minikube"

application.properties
quarkus.container-image.group=quarkus-mp
quarkus.container-image.name=client-userms
quarkus.kubernetes.name=client-userms

./mvnw clean install -Dmaven.test.skip
/target/kubernetes -> .yml and .json version of the required configuration
build Docker image:
./mvnw clean package -Dquarkus.container-image.build=true -Dmaven.test.skip 

Install Minikube:
follow the instructions to install both kubectl and Minikube, along with any pre-requisites.
https://kubernetes.io/docs/tasks/tools/
curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
sudo install minikube-linux-amd64 /usr/local/bin/minikube

kubectl:
snap install kubectl --classic
kubectl version --client

minikube: https://minikube.sigs.k8s.io/docs/start/
curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
sudo install minikube-linux-amd64 /usr/local/bin/minikube

minikube start
eval $(minikube -p minikube docker-env)
Deploy to Minikube:
./mvnw clean package -Dquarkus.kubernetes.deploy=true -Dmaven.test.skip 

minikube service list
| default     | client-userms                       | http/80      | http://192.168.49.2:31658 |

Browser:  http://192.168.49.2:31658 




minikube status
minikube stop
minikube delete


VIII) Kafka:
https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.4/kafka/kafka.html

	1) https://code.quarkus.io
	2) Change aritfacto text to "kafka-producer" and change to Java-11
	3) Add following dependencies(extensions):
		i) RESTEasy Reactive Jackson
		ii) SmallRye Reactive Messaging - Kafka Connector
		iii) SmallRye OpenAPI
	4) Generate(zip) and Extract
	5) Run following command for starting quarkus application in dev mode
	./mvnw compile quarkus:dev -Dquarkus.http.port=8086
	6) Open in browser the default app page of quarkus application: http://localhost:8086/
	7) Open in browser REST API: http://localhost:8086/hello
	8) Open in browser Swagger-UI: http://localhost:8086/q/swagger-ui/
	9) Open in browser Dev-UI: http://localhost:8086/q/dev-ui/
	10) Import userms in your IDE

You can add kafka extension in a generated project as below:
quarkus ext add quarkus-smallrye-reactive-messaging

